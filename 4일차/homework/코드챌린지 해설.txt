TA's 정답 해설
이번 챌린지의 핵심은 다양한 함수를 다형성과 제네릭이라는 개념을 바탕으로 자유롭게 만들어보는 것입니다. 제네릭의 경우 한 번만 선언을 하게 되면 다양한 타입에 재사용이 가능하다는 것이 큰 장점입니다.

last(arr) 함수
last(arr) 함수는 배열 내 마지막 값을 반환해주는 함수입니다. 여기서 파라미터인 arr은 배열이기 때문에 이 부분에 유의해서 타입을 먼저 선언해보겠습니다.
Last라는 이름의 제네릭 타입을 선언하겠습니다. 이 Last라는 타입은 last(arr) 함수에 대한 타입이기 때문에 type 또한 함수형으로 만들었습니다.
여기서 파라미터는 배열입니다. 따라서, items에 해당하는 타입은 T[] 형식의 배열꼴로 만들었습니다. 그리고 반환값은 하나의 값이 되므로 T만 적습니다. 여기서 T의 이름은 Type의 앞 글자만 딴 것이므로 T가 아닌 다른 글자를 넣어도 상관은 없습니다만 모두 통일시켜야 합니다 → 공식 문서 확인
type Last = <T>(items: T[]) => T;
이후 last()라는 익명 함수를 생성하였고, 우리가 만들어준 Last라는 타입을 붙여주었습니다.
자바스크립트에서 배열의 마지막 요소를 알아내기 위해 length라는 프로퍼티를 써서 마지막 값을 알아냅니다. 자바스크립트에서 배열은 맨 첫번째 인덱스가 0에서 시작하므로, 전체 길이에서 1을 뺀 [items.length - 1]이 배열의 마지막 인덱스가 됩니다.
prepend(arr, item) 함수
prepend(arr, item) 함수는 배열 arr에 새로운 아이템(item)을 맨 앞에 넣은 후 그렇게 만들어진 새로운 배열을 반환하는 함수였습니다.
이번에는 Prepend라는 이름의 제네릭 타입을 선언해주겠습니다. 이 또한 함수에 들어가는 타입이므로 함수형 꼴로 만들었습니다.
파라미터는 배열 하나와 값 하나 이렇게 총 2개가 들어갑니다. 따라서, 두개의 파라미터 타입으로 각각 T[]와 T로 부여했습니다. 반환값은 배열이어야 하므로 T[]로 붙여줬습니다.
type Prepend = <T>(items: T[], item: T) => T[];
전개 구문(Spread Operator)을 이용하여 맨 앞의 아이템과 기존 배열에 있던 아이템을 새로운 배열에 담아줍니다.
예를 들어, 만일 기존 배열이 const items = [1, 2, 3, 4, 5]였다면 [...items]는 안에 있는 숫자들만 밖으로 뺀 1, 2, 3, 4, 5가 되고, 이걸 다시 새로 추가한 item의 값을 맨 앞에 붙여서 ([item, …items]) 하나의 배열로 묶어 새로운 배열로 만든 것입니다.