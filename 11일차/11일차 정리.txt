23/06/08

npm init -y 롤 터미널에 입력해, package.json 을 설치

"main": "index.js", 삭제
scripts 수정

npm i -D typescript 설치
-D를 입력함으로써, 타입스크립트가 devDependencies에 설치된다.
"devDependencies": {
    "typescript": "^5.1.3"
  }
src라는 파일을 만들고 index.ts를 만들어준다.

touch tsconfig.json으로 만들어준다. 또는 새파일을 만들어 tsconfig.json으로 이름 설정

include의 배열에는, 우리가 자바스크립트로 컴파일하고 싶은 모든 디렉터리를 넣어준다.
include 배열 안에 src를 입력하는 것은, 타입스크립트가 src의 모든 파일을 확인한다는 것을 의미

outDir는 자바스크립트 파일이 생성될 디렉터리를 지정한다.
타입스크립트는 컴파일러니까, 이 파일들을 일반적인 자바스크립트로 컴파일 시켜줄 것이다.
그래서 우리는 타입스크립트에게 저 자바스크립트 파일을 어디에 만들지 알려줘야한다.

npm run build 를 터미널에 입력하면 

{
    "include": ["11일차"],
    "compilerOptions": {
        "outDir": "build"
    }
}

tsconfig.ts 에 지정한 경로에 있는 ts 파일을 build 라는 폴더를 만들어 컴파일된 js 파일을 저장한다.

index.ts에 입력되어있던 함수
const cup = () => "hi"

index.js에 컴파일된 함수
var cup = function () { return "hi"; };

target을 이용해 자바스크립트의 버전 설정가능
"target": "ES3"
ES3에는 const가 존재하지 않아 var로 설정된다.
ES6에는 const가 존재해 화살표 함수로 컴파일 된다.
const cup = () => "hi";

타입스크립트가 코드를 확인해 줄 뿐 아니라, JS 또는 TS의 발전된 기능을 사용할 수 있게 해준 뒤에 호환되는 코드로 이 기능들을 컴파일해주기때문이다.

lib는 합쳐진 라이브러리의 정의 파일을 특정해주는 역할을 한다.

document.querySelector() 를 입력한 후, ctrl를 누르며 querySelector를 누르면 lib.dom.d.ts로 이동한다.

타입스크립트는 내장된 자바스크립트 API를 위한 기본적인 타입 정의는 가지고 있다.
핵심은 "타입스크립트가 기본적인 타입 정의는 가지고 있다."이다
=> 타입스크립트에게 ( localStorage의 구조 / document의 모양 / Math의 오브젝트 ), argument, 그리고 return 값과 return 타입을 설명해 준 것이다.

타입정의 : 타입스크립트에게 몇몇 자바스크립트 코드의 타입을 설명해 주기 위해 사용하는 것
타입정의를 사용하는 이유 : 타입스크립트를 사용하는 목적과 연결되어 있는데, 우리는 타입스크립트와 다양한 것들의 타입에 대해 소통해야한다.
하지만 문제점은, 대부분의 경우 우리는 다른 패키지나, 프레임워크, 그리고 라이브러리를 사용하는데 그 패키지나 프레임워크, 라이브러리는 타입스크립트가 아니라 자바스크립트로 만들어졌다.
그래서 우리가 자바스크립트로 만들어진 라이브러리를 타입스크립트 프로젝트에 쓰려고 한다면, 타입스크립트는 그것들의 타입에 대해 알 길이 없다.
타입스크립트가 자바스크립트의 사용을 허용하기 위해 우리가 불러올 자바스크립트 함수의 모양을 설명하기 위한 타입 정의가 필요하다.

@ts-check
이것은 뭐냐면, 타입스크립트 파일에게 자바스크립트 파일을 확인하라고 알리는 것

JSDoc : 쉽게 말해서 코멘트로 이루어진 문법	//함수 바로 위에 코멘트를 적어주면된다.










