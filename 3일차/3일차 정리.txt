23/05/31

/* function add(a:number, b:number): number {
    return a + b
} */
//화살표함수로 바꾸기
//const add = (a:number, b:number) => a+b

//call signature 만들기
//call signature : 우리가 타입스크립트에게 이 함수가 어떻게 호출되는지 설명해주는 부분이다.
//내가 타입을 만들 수 있고, 함수가 어떻게 작동하는지 서술해둘 수 있다
//내가 그 함수를 구현하기 전에.
//첫번째로 타입을 생각하게 해준다
//먼저 함수의 타입을 설명하고, 그리고 나서 코드를 구현하게 된다.
type Add = (a: number, b: number) => number;
//파라미터의 타입은 무엇인지    //함수의 리턴 타입은 무엇인지
//함수명에 Add 타입을 입력해주면 a와 b에 따로 타입을 지정해주지 않아도 알 수 있다.
const add: Add = (a, b) => a + b

//overloading(오버로딩)
//함수가 여러개의 call signature를 가지고 있을 때 발생
//실제로 많은 오버로딩된 함수를 직접 작성하지는 않는다.
//하지만, 대부분의 시간을 다른 사람들이 만든 외부 라이브러리를 사용할텐데, 이런 패키지는 라이브러리들은 오버로딩을 엄청 많이 사용한다.

type Add2 = {
    (a: number, b: number): number
    (a: number, b: string): number
}
const add2: Add2 = (a, b) => {
    if (typeof b === "string") return a
    return a + b
}

type Config = {
    path: string,
    state: object
}

//오버로딩은 다른 여러개의 argument를 가지고 있을 때 발생하는 효과
type Push = {
    (path: string): void    //path는 string으로 받고 void(아무것도 리턴받지않음)
    (config: Config): void  //
    //어쩔 때는 path를 보내고, 어쩔 때는 config를 보낸다.
}

const push: Push = (config) => {                               //만약 string이나 Config 타입을 가지고 있으면 타입슼릡트 내부에서 체크하게 해준다.
    if (typeof config === "string") { console.log(config) }    //config가 string인지 체크
    else {
        console.log(config.path, config.state)                 //else에서는 config인 것을 확인
    }
}

type Add3 = {
    (a: number, b: number) :number
    (a: number, b: number, c: number) :number
                            //c는 옵션(선택사항)이라는 표시로 ? 사인을 넣어줌!
                            //세 번째 인수는 넣어도 동작하고 안넣어도 동작한다.
}
const add3:Add3 = (a, b, c?:number) => {
    //오류가 생기는 이유 : 다른 개수의 파라미터를 가지기 때문에
    //다른 개수의 파라미터를 가지게 되면 나머지 파라미터도 타입을 지정해줘야한다.
    //c?:number를 해주면 오류가 사라진다. /-> 마지막에 적힌 추가 파라미터가 옵션이라는 뜻
    //그래서 추가적으로 타입을 줘야하고, 이 파라미터는 선택사항이라는 것을 알려준다.
    if(c) return a + b + c
    return a + b
    //이 경우는 자주 보게 되지는 않는다.
}

add3(1, 2)
add3(1, 2, 3)

